// Copyright (c) 2022, NVIDIA CORPORATION.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { app, BrowserWindow, ipcMain } from 'electron';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: 'NVIDIA Morpheus',
    height: 768,
    width: 1280,
    show: true,
    skipTaskbar: false,
    autoHideMenuBar: true,
    backgroundColor: '#1A1918',
    paintWhenInitiallyHidden: true,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      nodeIntegrationInWorker: true,
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.webContents.once('dom-ready', () => { onDOMReady(mainWindow); });

  mainWindow.webContents.on('render-process-gone', (event, details) => {  //
    console.error('render process gone:', details);
    if (details.reason === 'crashed' || details.reason === 'killed') {
      setImmediate(() => {  //
        mainWindow.webContents.reload();
      });
    }
  });

  mainWindow.webContents.on('unresponsive', () => {
    console.error('main window unresponsive, reloading');
    setImmediate(() => {
      mainWindow.webContents.forcefullyCrashRenderer();
      // mainWindow.webContents.reload();
    });
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') { app.quit(); }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) { createWindow(); }
});

app.on('child-process-gone', (event, details) => {  //
  console.error('child process gone:', details);
});

// // In this file you can include the rest of your app's specific main process
// // code. You can also put them in separate files and import them here.

import { initializeDefaultPoolMemoryResource } from './rmm';

initializeDefaultPoolMemoryResource(
  2 * (1024 ** 3),  // 2GiB
  4 * (1024 ** 3),  // 4GiB
);

import { Series } from '@rapidsai/cudf';
Series.new([0, 1, 2]).sum();

import { tableFromIPC } from 'apache-arrow';

import { makeETLWorker } from './etl';
import { ShapedIcons } from './types';
import { withLayoutLoop } from './etl/layout';
import * as Ix from './ix';

import { DataCursor, HostBuffers, LayoutParams } from './types';
import { fromMessagePortEvent } from './utils';
import { ShapedUpdate } from './etl/types';

const dataCursors = new Ix.AsyncSink<DataCursor>();
const layoutParams = new Ix.AsyncSink<LayoutParams>();

ipcMain.on('dataCursor', (_, dataCursor) => { dataCursors.write(dataCursor); });
ipcMain.on('layoutParams', (_, xs) => { layoutParams.write(new LayoutParams(xs)); });

const initialUpdate = {
  index: 0,
  kind: 'replace',
  bbox: [NaN, NaN, NaN, NaN],
  ...new HostBuffers(),
};

function onDOMReady(mainWindow: BrowserWindow) {
  if (typeof process.env.LOG_RUN_TIMES !== 'undefined') { //
    console.clear();
  }

  const { worker, cursor, frames, update } = makeETLWorker();

  worker.once('online', () => {
    Ix.ai.from(dataCursors).forEach((dataCursor) => { cursor.port2.postMessage(dataCursor); });

    const updates = fromMessagePortEvent<ShapedUpdate>(update.port2, 'message');
    const counts = fromMessagePortEvent<{ count: number }>(frames.port2, 'message')
      .pipe(Ix.ai.ops.startWith({ count: 0 } as { count: number }));

    updates  //
      .pipe(withTooltipHandlers())
      .pipe(withLayoutLoop(layoutParams))
      .pipe(Ix.ai.ops.startWith(initialUpdate))
      .pipe(Ix.ai.ops.combineLatestWith(counts))
      .forEach(async ([{ index, edge, icon, node, bbox }, { count }]) => {
        const done = new Promise((r) => ipcMain.once('renderComplete', r));
        mainWindow.webContents.send('render', { index, count, edge, icon, node, bbox });
        await done.catch(() => { });
      })
      .catch((e) => { console.error('layout error', e); });
  });

  interface ShapedUpdateAndTooltipHandlers extends ShapedUpdate {
    getNodeData?: (event: import('electron').IpcMainEvent, idx: number) => void;
    getEdgeData?: (event: import('electron').IpcMainEvent, idx: number) => void;
    getIconData?: (event: import('electron').IpcMainEvent, idx: number) => void;
  }

  function withTooltipHandlers() {
    return Ix.ai.ops.scan({
      seed: {} as ShapedUpdateAndTooltipHandlers,
      callback(memo: ShapedUpdateAndTooltipHandlers, xs: ShapedUpdate) {
        // const nodes = tableFromIPC<ShapedNodes>(xs.nodes);
        // const edges = tableFromIPC<ShapedEdges>(xs.edges);
        const icons = tableFromIPC<ShapedIcons>(xs.icons);

        memo.getNodeData && ipcMain.off('getNodeData', memo.getNodeData);
        ipcMain.on('getNodeData', memo.getNodeData = (event, idx) => {  //
          // TODO
          // const eid         = nodes?.getChild('id')?.get(idx);
          // event.returnValue = edges?.getChild('data')?.get(eid) ?? `${idx}`;
          event.returnValue = ``;
        });

        memo.getEdgeData && ipcMain.off('getEdgeData', memo.getEdgeData);
        ipcMain.on('getEdgeData', memo.getEdgeData = (event, idx) => {  //
          // TODO
          // const data        = edges?.getChild('data');
          // event.returnValue = data?.get(idx) ?? `${idx}`;
          event.returnValue = ``;
        });

        memo.getIconData && ipcMain.off('getIconData', memo.getIconData);

        ipcMain.on('getIconData', memo.getIconData = (event, idx) => {  //
          event.returnValue = icons?.getChild('data')?.get(idx) || `${idx}`;
        });

        return Object.assign(memo, xs);
      }
    });
  }
}
